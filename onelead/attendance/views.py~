from django.shortcuts import render
from django.shortcuts import render
from django.template import RequestContext, loader

# Create your views here.


from django.http import HttpResponse
from leaddb.models import Attendance
from leaddb.models import Student
from leaddb.models import TimeTable


def index(request):
    latest_question_list = []
    context = {'latest_question_list': latest_question_list}
    return render(request, 'att.html', context)


#Add attendance based on dojo ajax.
def add_attendance(request):
	if request.method == 'GET':
		#Acessing form using a GET method , so deliver a form
		student_list = Student.objects.all()
		template = loader.get_template('add_attendance.html')
		context = RequestContext(request,{'student_list': student_list})
		return HttpResponse(template.render(context))
	else:
		#Acessing form using a POST method(may be an ajax call} , so save the data and say "saved"
		print request.POST
		#create a Batch object and set variables and save
		attendance=Attendance()
		#attendance.time_table_slot=TimeTable.objects.filter(id=timetable_id)
		#attendance.student=Student.objects.filter(id=student_id)
		attendance.save()
		#retrieve all saved data and send bak to dojo
		dbdata=""
		staffs=Staff.objects.all() #Retrieve all batches from db
		for staff in staffs:
			dbdata=dbdata+" "+staff.name
		print dbdata
		return HttpResponse("Saved one, so total :"+dbdata)

import json
from datetime import datetime
def get_slots(request):
	if request.method == 'GET':
		date=datetime.strptime(request.GET['date'] , '%m/%d/%Y').date()
		date_str=date.strftime('%Y-%m-%d')
		print date.year,date.month,date.day
		slot_list = TimeTable.objects.filter(start_date_time__year=date.year, 
			start_date_time__month=date.month, 
			start_date_time__day=date.day)
		slots=[]
		for slot in slot_list:
			slots.append(dict(value=slot.id,label=slot.summary))
		return HttpResponse(json.dumps(slots),content_type = "application/json")
		

def get_slots_old(request):
	if request.method == 'GET':
		date=datetime.strptime(request.GET['date'] , '%m/%d/%Y').date()
		date_str=date.strftime('%Y-%m-%d')
		slot_list = TimeTable.objects.filter(start_date_time__year=date.year, 
			start_date_time__month=date.month, 
			start_date_time__day=date.day)
		template = loader.get_template('slots')
		context = RequestContext(request,{'_list': batch_list})
		print context
		return HttpResponse(template.render(context))
		return HttpResponse(json.dumps(slots),content_type = "application/json")
		

